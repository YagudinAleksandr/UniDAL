using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Linq;
using System.Text;

namespace UniDAL.Generators
{
    /// <summary>
    /// Генератор кода
    /// </summary>
    [Generator(LanguageNames.CSharp)]
    public class RepositoryGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // 1. Фильтрация классов с атрибутом [Repository]
            var repositoryClasses = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (syntaxNode, _) =>
                        syntaxNode is ClassDeclarationSyntax cds &&
                        cds.AttributeLists.Count > 0,
                    transform: static (generatorContext, _) =>
                        (ClassDeclarationSyntax)generatorContext.Node
                )
                .Where(static cds =>
                    cds.AttributeLists.Any(al =>
                        al.Attributes.Any(a =>
                            a.Name.ToString() == "Repository" ||
                            a.Name.ToString() == "RepositoryAttribute")));

            // 2. Генерация кода
            context.RegisterSourceOutput(repositoryClasses,
                static (sourceProductionContext, classDeclaration) =>
                {
                    var source = GenerateRepositoryCode(classDeclaration);
                    sourceProductionContext.AddSource(
                        $"{classDeclaration.Identifier.Text}Repository.g.cs",
                        SourceText.From(source, Encoding.UTF8));
                });
        }

        private static string GenerateRepositoryCode(ClassDeclarationSyntax classDecl)
        {
            var namespaceName = GetNamespace(classDecl);
            var className = classDecl.Identifier.Text;

            return $$"""
            // <auto-generated/>
            using UniDAL.Core;
            using System.Linq;
            
            namespace {{namespaceName}};
            
            public partial class {{className}}Repository : IRepository<{{className}}>
            {
                private readonly IDatabaseProvider _provider;
                
                public {{className}}Repository(IDatabaseProvider provider)
                {
                    _provider = provider;
                }
                
                public Task<{{className}}?> GetByIdAsync(object id)
                    => _provider.QuerySingleAsync<{{className}}>("SELECT * FROM {{className}}s WHERE Id = @id", new { id });
                
                // Другие методы будут добавлены далее...
                
                public IQueryable<{{className}}> Query() 
                    => _provider.GetQueryable<{{className}}>();
            }
            """;
        }

        private static string GetNamespace(SyntaxNode node)
        {
            return node.Parent is BaseNamespaceDeclarationSyntax namespaceDecl
                ? namespaceDecl.Name.ToString()
                : "Global";
        }
    }
}
